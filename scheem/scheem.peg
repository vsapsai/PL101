start =
    expression

digit =
    [0-9]

alphachar =
    [a-zA-Z_?!+\-=@#$%^&*/.]

validchar =
    digit
  / alphachar

quote_char =
    "'"

positive_float_number =
    int_part:digit+ [.] frac_part:digit+
        { return parseFloat(int_part.concat(["."].concat(frac_part)).join("")); }
  / int_part:digit+ [.]
        { return parseFloat(int_part.concat(["."]).join("")); }
  / [.] frac_part:digit+
        { return parseFloat(["."].concat(frac_part).join("")); }

float_number =
    [-] number:positive_float_number
        { return -number; }
  / positive_float_number


positive_integer_number =
    digits:digit+
        { return parseInt(digits.join(""), 10); }

integer_number =
    [-] number:positive_integer_number
        { return -number; }
  / positive_integer_number

atom =
    float_number
  / integer_number
  / char:alphachar chars:validchar*
        { return [char].concat(chars).join(""); }

whitespace_char =
    [ \n\t]

whitespace =
    whitespace_char* comment whitespace_char*
  / whitespace_char+

whitespace_opt =
    whitespace
  / ""

comment =
    ";;" [^\n]* "\n"?

spaced_expression =
    whitespace expr:expression
        { return expr; }

expression_list =
    first:expression rest:spaced_expression*
        { return [first].concat(rest); }

expression =
    single:atom
        { return single; }
  / whitespace_opt "(" whitespace_opt multiple:expression_list whitespace_opt ")" whitespace_opt
        { return multiple; }
  / whitespace_opt quote_char quoted_expression:expression
        { return ["quote", quoted_expression]; }
